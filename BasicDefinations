1:- What is React ?
React is a JavaScript Library known for front-end development (or user interface). It is popular due to its component-based architecture, Single Page Applications (SPAs) and Virtual DOM for building web applications that are fast, efficient, and scalable.

Why Learn React JS?
React, the popular JavaScript library, offers several exciting reasons for developers to learn it.

👉Flexibility: React allows you to build high-quality user interfaces across different platforms, thanks to its flexible library approach.
👉Great Developer Experience: React makes it easier to write and understand code, offering a smooth development process.
👉Strong Support from Facebook: Regular updates, bug fixes, and resources from Facebook ensure React stays up-to-date and reliable.
👉Vast Community Support: React benefits from a large community, providing enough resources, tutorials, and troubleshooting help.
👉Excellent Performance: React’s efficient Virtual DOM ensures fast rendering and high performance for web applications.
👉Easy Testing: React’s structure and tools make testing simpler, improving code reliability and maintainability.

2:- What is state :- 
State in React refers to a built-in object that holds data or information about a component. It determines how a component renders and behaves. When the state changes, React re-renders the component to reflect the updated data.

🌺Types of States in ReactJs
👉Local State
👉Global State
👉Server State
👉Url State

👉Local State:-
State that is manages within a single component.
Use Cases:-
📖Managing UI element
📖Temporary Data Specific to a component

👉Global State:-
State thai is shared across multiple components
Use Cases:-
📖Managing authenticated user data
📖Managing global application themes or language preferences.

👉Server State:-
State that comes from an external server (API) and needs to be integrated with UI state.
Use Cases:-
📖Fetching and managing API data
📖Handling loading states, erros, and caching.

👉Url State:-
State stored in the URL, such as query parameters, pathname, and hash.
Use Cases:-
📖Handling navigation and routing
📖Maintaining state that persists when refreshing or sharing the URL
Code Example:-

import { useLocation, useSearchParams } from 'react-router-dom';

const Example = () => {
  const location = useLocation();
  const [searchParams] = useSearchParams();

  return (
    <div>
      <p>Current Path: {location.pathname}</p>
      <p>Query Param Value: {searchParams.get("example")}</p>
    </div>
  );
};


👨‍💻Props in React
Props (short for Properties) are used to pass data from a parent component to a child component. Unlike state, props are immutable, meaning they cannot be modified within the receiving component.

👉Props allow components to be reusable and dynamic.
Props are read-only and cannot be changed by the child component.
👉They help in data communication between components.
Passed as attributes in JSX elements.

⭐What is Prop Drilling and How to Avoid it?
Prop drilling in React refers to the process of passing data (props) from a parent component down to deeply nested child components through multiple intermediate components, even if those intermediate components do not directly use the data. This can lead to unnecessary complexity and reduced maintainability.

code example:-
import React from "react";

// Parent component that holds the message and passes it down
function Parent() {
    const message = "Hello from Parent";
    return (
        <div>
            <Child message={message} />
        </div>
    );
}

function Child({ message }) {
    return (
        <div>
            <Grandchild message={message} />
        </div>
    );
}

function Grandchild({ message }) {
    return (
        <div>
            <p>Message: {message}</p>
        </div>
    );
}

export default function App() {
    return (
        <div>
            <Parent />
        </div>
    );
}



👨‍💻Why We Shouldn’t Use Prop Drilling?
👉Code Maintainability: Passing props through multiple components makes the code harder to read and update.
👉Component Coupling: Components become tightly coupled to their parent components, making them less reusable.
👉Scalability Issues: As the app grows, prop drilling can lead to a cluttered component hierarchy.
👉Increased Boilerplate: Developers must manually pass props at each level, leading to unnecessary duplication of code.

👨‍💻How to Avoid Prop Drilling?
👉 Using Context API:-
The React Context API provides a way to share values (like state, functions, or constants) between components without explicitly passing props.

code example:-
import React, { createContext, useContext } from 'react';
const UserContext = createContext();
const App = () => {
    const userName = 'geeksforgeeks';
    return (
        <UserContext.Provider value={userName}>
            <Parent />
        </UserContext.Provider>
    );
};
const Parent = () => {
    return <Child />;
};
const Child = () => {
    return <GrandChild />;
};
const GrandChild = () => {
    const userName = useContext(UserContext); // Access context value
    return <p>Hello, {userName}!</p>;
};
export default App;

👉Using Custom Hooks:-
Custom hooks are reusable functions in React that encapsulate stateful logic, starting with use (e.g., useFetch). They improve code reusability, keep components clean, and allow sharing logic across components.

code example:-
import React, { createContext, useContext } from "react";
const UserContext = createContext();
const useUser = () => { return useContext(UserContext); };
const App = () => {
    const userName = "GeeksforGeeks";

    return (
        <UserContext.Provider value={userName}>
            <Component />
        </UserContext.Provider>
    );
};
const Component = () => {
    return <Child />;
};
const Child = () => { return <Grand />; };
const Grand = () => {
    const userName = useUser();
    return <p>Hello, {userName}!</p>;
};
export default App;
